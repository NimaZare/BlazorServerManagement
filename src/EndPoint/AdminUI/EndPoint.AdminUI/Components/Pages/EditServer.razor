@page "/servers/{id:int}"
@inject NavigationManager NavigationManager
@inject JSRuntime JSRuntime
@rendermode InteractiveServer

@* <NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" ConfirmExternalNavigation="true" /> *@

<h3>Edit Server</h3>
<br />
<br />
@if (server is not null)
{
    <EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <InputNumber @bind-Value="server.Id" hidden />
        <FieldComponent Label="Name">
            <Control>
                <InputText @bind-Value="server.Name" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.Name"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>
        <FieldComponent Label="City">
            <Control>
                <InputText @bind-Value="server.City" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.City"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>
        <FieldComponent Label="Online">
            <Control>
                <InputCheckbox @bind-Value="server.IsOnline" class="form-check-input" />
            </Control>
        </FieldComponent>
        <br />
        <button class="btn btn-primary" type="submit">Update</button>
        &nbsp;
        <a href="/servers" class="btn btn-secondary">Close</a>
    </EditForm>
}

@code {

    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Server? server { get; set; }

    protected override void OnParametersSet()
    {
        server ??= ServersRepository.GetServerById(this.Id);
    }

    private void Submit()
    {
        if (server is not null)
        {
            ServersRepository.UpdateServer(server.Id, server);
        }

        try
        {
            NavigationManager.NavigateTo("/servers", true);
        }
        catch (NavigationException ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    // {
    //     var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to leave this page?");

    //     if (isConfirmed is not true)
    //     {
    //         context.PreventNavigation();
    //     }
    // }
}
