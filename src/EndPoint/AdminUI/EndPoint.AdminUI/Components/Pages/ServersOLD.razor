@page "/serversold"

@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<h2>Servers</h2>
<br />
<br />
<div class="container-fluid text-center">
    <div class="row w-70">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase)? "border-primary":"")">
                    <img src="@($"/images/{city}.png")" class="card-img-top" alt="img" />
                    <div class="card-body">
                        <button class="btn btn-primary" @onclick="@(() => { SelectServerCity(city); })">@city</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<br />
<div class="input-group mb-3">
    @* <input type="text" class="form-control" placeholder="Search Servers" @onchange="HandleServerFilter" /> *@
    <input type="text" class="form-control" placeholder="Search Servers"
           @bind-value="serverFilter"
           @bind-value:event="oninput" />
    &nbsp;
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>
<br />
<ul>
    @* @foreach (var server in servers)
    {
    <li class="pb-1" @key="server.Id">
    @server.Name in @server.City is
    <span style="color:@(server.IsOnline ? "green" : "red")">
    @(server.IsOnline ? "Online" : "Offline")
    </span>
    &nbsp;
    <a href="/servers/@server.Id" class="btn btn-link border-primary"><i class="bi bi-pencil-fill"></i></a>
    <button type="button" class="btn btn-outline-danger" @onclick="@(() => { DeleteServer(server.Id); })"><i class="bi bi-trash3-fill"></i></button>
    </li>
    } *@

    <Virtualize Items="this.servers" Context="server">
        <li class="pb-1" @key="server.Id">
            @server.Name in @server.City is
            <span style="color:@(server.IsOnline ? "green" : "red")">
                @(server.IsOnline ? "Online" : "Offline")
            </span>
            &nbsp;
            <a href="/servers/@server.Id" class="btn btn-link border-primary"><i class="bi bi-pencil-fill"></i></a>
            <button type="button" class="btn btn-outline-danger" @onclick="@(() => { DeleteServer(server.Id); })"><i class="bi bi-trash3-fill"></i></button>
        </li>
    </Virtualize>
</ul>

<br />
<p>
    <a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>
<br />
<p>
    <button class="btn btn-secondary"
            @onclick="@(() =>
            {
                this.servers.Insert(0, new Server { Name = "Server A", City = "Toronto"});
            })">
        Add Server 2
    </button>
</p>

@code {
    private List<Server> servers = ServersRepository.GetServersByCity("Toronto");
    private List<string> cities = CitiesRepository.GetCities();
    private string selectedCity = "Toronto";
    private string _serverFilter = "";
    private string serverFilter
    {
        get => _serverFilter;
        set
        {
            _serverFilter = value;
            // can do whatever you want
            this.servers = ServersRepository.SearchServers(serverFilter);
            this.selectedCity = string.Empty;
        }
    }

    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            this.servers = ServersRepository.GetServersByCity(selectedCity);
        }
    }

    private void SelectServerCity(string cityName)
    {
        this.selectedCity = cityName;
        this.servers = ServersRepository.GetServersByCity(this.selectedCity);

        if (cityName == "Halifax")
        {
            for (int i = 16; i < 2000; i++)
            {
                this.servers.Add(new Server { Id = i, Name = $"Server {i}", City = "Halifax" });
            }
        }
    }

    // private void HandleServerFilter(ChangeEventArgs args)
    // {
    //     this.serverFilter = args.Value?.ToString() ?? string.Empty;
    // }

    private void HandleSearch()
    {
        this.servers = ServersRepository.SearchServers(serverFilter);
        this.selectedCity = string.Empty;
    }
}
